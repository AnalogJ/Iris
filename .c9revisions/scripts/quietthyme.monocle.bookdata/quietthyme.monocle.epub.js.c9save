{"ts":1355612731747,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1355612736839,"patch":[[{"diffs":[[1,"// @reference jszip.js\r\n\r\nvar QT = QT || {};\r\n\r\nQT.bookdata = (function(qt){\r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Private Data\r\n    //////////////////////////////////////////////////////////////////////////\r\n    var EVENT_LOADING = 'EVENT_LOADING';\r\n    \r\n    var MSG = {};\r\n    MSG.LOADING_FILE = 'Loading file from url';\r\n    MSG.UNZIPPING = 'Unzipping';\r\n    MSG.UNCOMPRESSING = 'Uncompressing file: ';\r\n    MSG.READING_OPF = 'Reading OPF';\r\n    MSG.POST_PROCESSING = 'Post processing';\r\n    MSG.FINISHED = 'Finished!';\r\n    \r\n    MSG.ERR_NOT_ZIP = 'File is not a proper Zip file';\r\n    MSG.ERR_BLANK_URL = 'Zip url cannot be blank';\r\n    \r\n    var STATE = {};\r\n    STATE.OK = 1;\r\n    STATE.ERR = 2;\r\n    \r\n    var unzipper;\r\n    var compressedFiles;\r\n    var files = {};\r\n    var opfPath;\r\n    var container;\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Private Methods\r\n    //////////////////////////////////////////////////////////////////////////\r\n    /**\r\n     * Determines if browser is a version of IE that supports ActiveXObjects.\r\n     */ \r\n    function useMSXHR() {\r\n        return typeof ActiveXObject == \"function\";\r\n    }\r\n    /**\r\n     * Retrieves the epub file from url,\r\n     * @param {String} url The url for the epub file.\r\n     * @param {Function} callback The callback that is executed once the epub file has been retrieved.\r\n     */ \r\n    function getBinaryFile(url, callback) {\r\n        var request = useMSXHR() ? new ActiveXObject(\"Msxml2.XmlHttp.6.0\")\r\n\t\t\t\t: new XMLHttpRequest();\r\n\t\trequest.onreadystatechange = function() {\r\n\t\t\tif (request.readyState == 1) {\r\n\t\t\t\tif (request.overrideMimeType) {\r\n\t\t\t\t\trequest\r\n\t\t\t\t\t\t\t.overrideMimeType('text/plain; charset=x-user-defined');\r\n\t\t\t\t}\r\n\t\t\t\trequest.send();\r\n\t\t\t}\r\n\r\n\t\t\tif (request.readyState == 4) {\r\n\t\t\t\tif (request.status == 200) {\r\n\t\t\t\t\tvar data;\r\n\t\t\t\t\tif (useMSXHR()) {\r\n\t\t\t\t\t\tvar data = new VBArray(request.responseBody).toArray();\r\n\t\t\t\t\t\tfor ( var j = 0; j < data.length; ++j)\r\n\t\t\t\t\t\t\tdata[j] = String.fromCharCode(data[j]);\r\n\t\t\t\t\t\tcallback(data.join(''));\r\n\t\t\t\t\t\trequest.abort();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcallback(request.responseText);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('Failed to get file ' + url + '<br>');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\trequest.open(\"GET\", url, true);\r\n\t}\r\n    \r\n    /**\r\n     * Retrieves the epub file from url, then begins the process of parsing it by retrievig the container.xml file.\r\n     * @param {data} data contained inside the epub file.\r\n     */\r\n    function unzipBlob(data) {\r\n        try{\r\n            publish(EVENT_LOADING, STATE.OK,MSG.UNZIPPING);\r\n            unzipper = new JSZip();\r\n            unzipper.load(data, {\r\n                base64 : false\r\n            });\r\n            \r\n            console.log(unzipper);\r\n            console.log(unzipper.files);\r\n            compressedFiles= unzipper.files;\r\n            uncompressNextCompressedFile()\r\n            \r\n        }\r\n        catch(ex){\r\n            publish(EVENT_LOADING, STATE.ERR,MSG.ERR_NOT_ZIP);\r\n        }\r\n\t}\r\n    \r\n    function uncompressNextCompressedFile() {\r\n        var compressedFile = compressedFiles.shift();\r\n        if (compressedFile) {\r\n            publish(EVENT_LOADING, STATE.OK, MSG.UNCOMPRESSING + compressedFile.name);\r\n            uncompressFile(compressedFile);\r\n            withTimeout(uncompressNextCompressedFile);\r\n        } else {\r\n            didUncompressAllFiles();\r\n        }\r\n    };\r\n        \r\n    // For mockability\r\n    function withTimeout(func) {\r\n        var self = this;\r\n        setTimeout(function () {\r\n            func.call(self);\r\n        }, 30);\r\n    };\r\n\r\n    function didUncompressAllFiles() {\r\n            publish(EVENT_LOADING, STATE.OK, MSG.READING_OPF);\r\n            opfPath = getOpfPathFromContainer();\r\n            readOpf(files[opfPath]);\r\n\r\n            publish(EVENT_LOADING, STATE.OK, MSG.POST_PROCESSING);\r\n            postProcess();\r\n            publish(EVENT_LOADING, STATE.OK, MSG.FINISHED);\r\n        },\r\n\r\n    function uncompressFile(compressedFile) {\r\n        var data = compressedFile.data;\r\n\r\n        if (compressedFile.name === \"META-INF/container.xml\") {\r\n            this.container = data;\r\n        } else if (compressedFile.fileName === \"mimetype\") {\r\n            this.mimetype = data;\r\n        } else {\r\n            this.files[compressedFile.fileName] = data;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Public Methods\r\n    //////////////////////////////////////////////////////////////////////////\r\n    var init = function(url, options){\r\n        \r\n        if(url){\r\n            publish(EVENT_LOADING, STATE.OK,MSG.LOADING_FILE);\r\n            getBinaryFile(url,unzipBlob);\r\n            \r\n        }\r\n        else{\r\n            publish(EVENT_LOADING, STATE.ERR,MSG.ERR_BLANK_URL);\r\n        }\r\n        \r\n        \r\n    };\r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Messaging Methods\r\n    //////////////////////////////////////////////////////////////////////////\r\n    \r\n    function publish(event, state, message){\r\n        $(window).trigger(event, [state, message]);\r\n    }\r\n    function subscribe(selector, event, handler){\r\n        $(selector).bind(event, handler);\r\n    }\r\n    \r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Monocle Book Data Interface Methods \r\n    // https://github.com/joseph/Monocle/wiki/Book-data-object\r\n    //////////////////////////////////////////////////////////////////////////\r\n    \r\n    var getComponents = function () {\r\n    \r\n    }\r\n    var getContents = function () {\r\n       \r\n    }\r\n    var getComponent = function (componentId) {\r\n    \r\n    }\r\n    var getMetaData = function(key) {\r\n    \r\n    }\r\n    \r\n    return {\r\n        init : init,\r\n        \r\n        /*Monocle Book Data Interface Methods*/\r\n        getComponents : getComponents,\r\n        getContents : getContents,\r\n        getComponent : getComponent,\r\n        getMetaData : getMetaData\r\n    }\r\n        \r\n    \r\n})(QT)\r\n\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6138}]],"length":6138,"saved":false}
