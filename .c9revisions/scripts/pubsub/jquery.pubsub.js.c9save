{"ts":1355699630064,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1355699624056,"patch":[[{"diffs":[[1,"/* Author: Jason Kulatunga\r\nDescription: Modified version of pubSub by Peter Higgins.\r\n*/\r\n\r\n\r\n/*    \r\n\r\n\tjQuery pub/sub plugin by Peter Higgins (dante@dojotoolkit.org)\r\n\r\n\tLoosely based on Dojo publish/subscribe API, limited in scope. Rewritten blindly.\r\n\r\n\tOriginal is (c) Dojo Foundation 2004-2009. Released under either AFL or new BSD, see:\r\n\thttp://dojofoundation.org/license for more information.\r\n\r\n*/\t\r\n\r\n;(function(d){\r\n\r\n\t// the topic/subscription hash\r\n\tvar cache = {};\r\n\r\n\td.publish = function(/* String */topic, /* Array? */args){\r\n\t\t// summary: \r\n\t\t//\t\tPublish some data on a named topic.\r\n\t\t// topic: String\r\n\t\t//\t\tThe channel to publish on\r\n\t\t// args: Array?\r\n\t\t//\t\tThe data to publish. Each array item is converted into an ordered\r\n\t\t//\t\targuments on the subscribed functions. \r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tPublish stuff on '/some/topic'. Anything subscribed will be called\r\n\t\t//\t\twith a function signature like: function(a,b,c){ ... }\r\n\t\t//\r\n\t\t//\t|\t\t$.publish(\"/some/topic\", [\"a\",\"b\",\"c\"]);\r\n        try{\r\n\t\t    d.each(cache[topic], function(){\r\n\t\t\t    this.apply(d, args || []);\r\n\t\t    });\r\n        }\r\n        catch(err){\r\n            //alert(err);\r\n            console.log(topic);\r\n            console.log(args);\r\n            console.log(err);\r\n        }\r\n\t};\r\n\r\n\td.subscribe = function(/* String */topic, /* Function */callback){\r\n\t\t// summary:\r\n\t\t//\t\tRegister a callback on a named topic.\r\n\t\t// topic: String\r\n\t\t//\t\tThe channel to subscribe to\r\n\t\t// callback: Function\r\n\t\t//\t\tThe handler event. Anytime something is $.publish'ed on a \r\n\t\t//\t\tsubscribed channel, the callback will be called with the\r\n\t\t//\t\tpublished array as ordered arguments.\r\n\t\t//\r\n\t\t// returns: Array\r\n\t\t//\t\tA handle which can be used to unsubscribe this particular subscription.\r\n\t\t//\t\r\n\t\t// example:\r\n\t\t//\t|\t$.subscribe(\"/some/topic\", function(a, b, c){ /* handle data */ });\r\n\t\t//\r\n\t\tif(!cache[topic]){\r\n\t\t\tcache[topic] = [];\r\n\t\t}\r\n\t\tcache[topic].push(callback);\r\n\t\treturn [topic, callback]; // Array\r\n\t};\r\n\r\n\td.unsubscribe = function(/* Array */handle){\r\n\t\t// summary:\r\n\t\t//\t\tDisconnect a subscribed function for a topic.\r\n\t\t// handle: Array\r\n\t\t//\t\tThe return value from a $.subscribe call.\r\n\t\t// example:\r\n\t\t//\t|\tvar handle = $.subscribe(\"/something\", function(){});\r\n\t\t//\t|\t$.unsubscribe(handle);\r\n\t\t\r\n\t\tvar t = handle[0];\r\n\t\tcache[t] && d.each(cache[t], function(idx){\r\n\t\t\tif(this == handle[1]){\r\n\t\t\t\tcache[t].splice(idx, 1);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n    d.getcache = function(){\r\n        return cache;\r\n    }\r\n\r\n})(jQuery);"]],"start1":0,"start2":0,"length1":0,"length2":2516}]],"length":2516,"saved":false}
